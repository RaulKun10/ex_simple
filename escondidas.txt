

enum RolesJuegoEscondidas{
    case contando
    case buscando_jugadores

    
    case buscando_escondite
    case escondido
    case regresando_a_base
    case encontrado
    
    case cantar_victoria
    case suspendido /// Es el caso en que el juego vuelve a su estado original de inicio.
}


protocol JugadorDeEscondidas: class{
    var rol: RolesJuegoEscondidas { get set }
    var compañeros_de_juego: [JugadorDeEscondidas] { get set }
    var nombre: String { get set }
    var lugar_actual: UbicacionFisica? { get set }
    var visibilidad: Double { get set }
    
    func actualizar() -> Bool
    
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool
    
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool
}



extension JugadorDeEscondidas { /// Al parecer un protocol se instancia como un struct y no puede mutar el tipo de dato a menos que tenga modificado que aplciara a un tipo en especifico
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool {
        switch(self.rol){
            case .suspendido: 
                self.rol = rol_nuevo
                return true
            
            case .cantar_victoria, .encontrado: 
                if rol_nuevo == .suspendido {
                    self.rol = rol_nuevo
                    return true
                }
                return false
                
                
            default: 
                return false
        }
        
    }
}

struct Ubicacion2Dimensiones{
    var x: Int
    var y: Int 
    
    init(_ x: Int, _ y: Int){
        self.x = x
        self.y = y
    }
}

class UbicacionFisica{
    var nombre: String
    var lugares_cercanos: [UbicacionFisica]
    
    //init(_ nombre: String, lugares_cercanos: [UbicacionFisica]){
    init(_ nombre: String){
        self.nombre = nombre
        self.lugares_cercanos = []
    }
    
    func agregar_lugar(_ lugar: UbicacionFisica) -> Bool{
        for ubicacion in lugares_cercanos{
            if ubicacion.nombre == lugar.nombre{
                return false
            }
        }
        
        lugar.lugares_cercanos.append(self)
        self.lugares_cercanos.append(lugar)
        
        return true
    }
}

class Personaje {
    var nombre: String
    var ubicacion: UbicacionFisica?
    
    init(_ nombre: String){
        self.nombre = nombre
        self.ubicacion = nil
    }
    
    func establecer_ubicacion(_ nueva_ubicacion: UbicacionFisica) -> Bool{
        if ubicacion == nil{
            self.ubicacion = nueva_ubicacion
            return true
        }
        
        if ubicacion!.nombre == nueva_ubicacion.nombre{
            return false
        }
        
        ubicacion = nueva_ubicacion
        return true
    }
    
}

class PersonajeJugable: Personaje, JugadorDeEscondidas{
    var visibilidad: Double
    var rol: RolesJuegoEscondidas = .suspendido

    var lugar_actual: UbicacionFisica?
    
    var numero_contado: Int
    
    var compañeros_de_juego: [JugadorDeEscondidas] = []
    
    init(_ nombre: String, visibilidad: Double){
        self.visibilidad = visibilidad
        numero_contado = 0
        super.init(nombre)
        lugar_actual = nil
    }
    
    func actualizar() -> Bool{
        switch(rol){
            case .contando:
                self.contar_para_buscar()
            
            case .buscando_jugadores:
                self.identificar_jugadores()
                self.moverse_de_lugar()
            
            case .buscando_escondite:
                self.moverse_de_lugar()
                
                let quedarse_quieto = Int.random(in: 0...10)
                if quedarse_quieto % 5 == 0{
                    self.rol = .escondido
                }
                
            case .cantar_victoria, .suspendido:
                //self.haz_nada()
                print("TODO")
            
            default:
                print("todo")
        }
        return false
    }
    
    func identificar_jugadores(){
        for compañero in compañeros_de_juego{
            if compañero.lugar_actual!.nombre == self.lugar_actual!.nombre{
                let probabildiad_de_omitir = Int(compañero.visibilidad * 100)
                
                let suerte = Int.random(in: 0...100)
                
                if suerte > probabildiad_de_omitir{
                    compañero.rol = .suspendido
                }
                
            }
        }
    }
    
    func moverse_de_lugar(){
        var indice_de_nuevo_lugar = Int.random(
                in: 0..<lugar_actual!.lugares_cercanos.count
            )
            
        var nuevo_lugar = lugar_actual!.lugares_cercanos[indice_de_nuevo_lugar]
        
        let deberia_de_cambiar = Int.random(in: 0...10)
        
        if deberia_de_cambiar % 2 == 0 {
            cambiar_de_lugar_a(nuevo_lugar)
        }
    }
    
    func contar_para_buscar(){
        numero_contado += 1
        print("Soy \(nombre) y voy en el \(numero_contado)")
        
        if numero_contado > 10{
            self.rol = .buscando_jugadores
        }
    }
    
    func cambiar_de_lugar_a(_ ubicacion: UbicacionFisica) -> Bool{
        if self.lugar_actual == nil {
            self.lugar_actual = ubicacion
            return true 
        } 
        
        // if let ubi = lugar actual {}
        //if ubicacion != nil && ubicacion.nombre == lugar_actual.nombre{
        if ubicacion.nombre == self.lugar_actual!.nombre{
            return false
        }
        
        lugar_actual = ubicacion
        return true
    }
    
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool{
        if compañero_nuevo.nombre == self.nombre{
            return false
        }
        
        for compañero in compañeros_de_juego{
            if compañero.nombre == compañero_nuevo.nombre{
                return false
            }
        }
        
        compañeros_de_juego.append(compañero_nuevo)
        return true
    }
}

func iniciar_juego(jugadores: [JugadorDeEscondidas]) {
    let numero_del_jugador_que_busca = Int.random(in: 0..<jugadores.count)
    var jugador_que_busca: JugadorDeEscondidas = jugadores[numero_del_jugador_que_busca]
    
    jugador_que_busca.establecer_rol(.contando)
    
    for jugador in jugadores {
        jugador_que_busca.agregar_compañero(jugador)
        
        if jugador.rol == .suspendido{
            jugador.establecer_rol(.buscando_escondite)
        }
    }

    // print("el numero del jugador es \(jugador_que_busca)")
}

let punto_de_inicio = Ubicacion2Dimensiones(1, 3)

var jugadores: [PersonajeJugable] = []

jugadores.append(PersonajeJugable("Pepito Bananas", visibilidad: 0.5))
jugadores.append(PersonajeJugable("Wally", visibilidad: 0.1))
jugadores.append(PersonajeJugable("Chuchito", visibilidad: 0.2))
jugadores.append(PersonajeJugable("Anabelle", visibilidad: 0.9))

let loby = UbicacionFisica("Loby")
let oficina = UbicacionFisica("Oficina")
let sala_de_estar = UbicacionFisica("Sala de estar")
let salon = UbicacionFisica("Salon")
let baños = UbicacionFisica("Baños")

// Loby --- sala_de_estar
loby.agregar_lugar(sala_de_estar)

// Loby --- Salon
loby.agregar_lugar(salon)

// Loby --- oficina
loby.agregar_lugar(oficina)

// sala_de_estar --- Baño
sala_de_estar.agregar_lugar(baños)

// Salon --- Baño
salon.agregar_lugar(baños)




var ubicaciones_juego: [UbicacionFisica] = []
ubicaciones_juego.append(loby)


iniciar_juego(jugadores: jugadores)

for jugador in jugadores{
    jugador.cambiar_de_lugar_a(loby)
}


/// Aqui tenemos la parte de auto juego
var ciclo_actual = 0

// Aqui va mi juego
while true {
    for jugador in jugadores{
        jugador.actualizar()
    }
    
    for jugador in jugadores{
        print("El rol de \(jugador.nombre) es \(jugador.rol)")
        print("Estoy en: \(jugador.lugar_actual?.nombre ?? "No se")")
        print("Mis compañeros son: \(jugador.compañeros_de_juego.count)")
    }
    print("")
   
   ciclo_actual += 1 
   if ciclo_actual > 25{
       break
   }
}

let nuevo = PersonajeJugable("Nova", visibilidad: 0.30)
jugadores.append(nuevo)
_ = nuevo.cambiar_de_lugar_a(loby)
for j in jugadores {
    if j.nombre != nuevo.nombre { _ = j.agregar_compañero(nuevo) }
}
for existente in jugadores {
    if existente.nombre != nuevo.nombre { _ = nuevo.agregar_compañero(existente) }
}
if nuevo.rol == .suspendido { _ = nuevo.establecer_rol(.buscando_escondite) }

let nombreCamuflado = "Wally"
let turnosCamuflajeTotal = 5
var turnosCamuflajeRestantes = turnosCamuflajeTotal
var visOriginalCamuflaje: Double = 0.0
var camuflajeActivado = false

func aplicarCamuflajeSiHaceFalta() {
    if !camuflajeActivado,
       let objetivo = jugadores.first(where: { $0.nombre == nombreCamuflado }) {
        visOriginalCamuflaje = objetivo.visibilidad
        objetivo.visibilidad = max(0.05, objetivo.visibilidad * 0.5)
        camuflajeActivado = true
        print("Camuflaje activado en \(objetivo.nombre). Vis =", objetivo.visibilidad)
    }
}
func decaerCamuflajeAlFinalDelCiclo() {
    guard camuflajeActivado else { return }
    turnosCamuflajeRestantes -= 1
    if turnosCamuflajeRestantes <= 0,
       let objetivo = jugadores.first(where: { $0.nombre == nombreCamuflado }) {
        objetivo.visibilidad = visOriginalCamuflaje
        camuflajeActivado = false
        print("Camuflaje terminó en \(objetivo.nombre). Vis restaurada =", objetivo.visibilidad)
    }
}

let factorCampanilla: Double = 1.8
var campanillaActivaEsteCiclo = false
var campanillaAfectados: [(String, Double)] = []

func intentarActivarCampanilla() {
    if let buscador = jugadores.first(where: { $0.rol == .buscando_jugadores }),
       let sala = buscador.lugar_actual {
        let suerte = Int.random(in: 0...9)
        if suerte < 3 {
            campanillaActivaEsteCiclo = true
            campanillaAfectados.removeAll()
            for j in jugadores {
                if j.lugar_actual?.nombre == sala.nombre {
                    campanillaAfectados.append((j.nombre, j.visibilidad))
                    j.visibilidad = min(1.0, j.visibilidad * factorCampanilla)
                }
            }
            print("Campanilla activada por \(buscador.nombre) en \(sala.nombre)")
        }
    }
}
func restaurarCampanillaAlFinalDelCiclo() {
    if campanillaActivaEsteCiclo {
        for (nombre, visAnterior) in campanillaAfectados {
            if let j = jugadores.first(where: { $0.nombre == nombre }) {
                j.visibilidad = visAnterior
            }
        }
        campanillaAfectados.removeAll()
        campanillaActivaEsteCiclo = false
    }
}

let nombreConBotas = "Chuchito"
let turnosBotasTotal = 4
var turnosBotasRestantes = turnosBotasTotal

func aplicarBotasSiNoSeMovio(jugador: PersonajeJugable, estabaEn anterior: UbicacionFisica?) {
    guard turnosBotasRestantes > 0, jugador.nombre == nombreConBotas else { return }
    let noSeMovio = (anterior?.nombre == jugador.lugar_actual?.nombre)
    if noSeMovio, let sala = jugador.lugar_actual, !sala.lugares_cercanos.isEmpty {
        let idx = Int.random(in: 0..<sala.lugares_cercanos.count)
        let destino = sala.lugares_cercanos[idx]
        _ = jugador.cambiar_de_lugar_a(destino)
        print("\(jugador.nombre) usa Botas y salta a \(destino.nombre)")
    }
}
func decaerBotasAlFinalDelCiclo() {
    if turnosBotasRestantes > 0 { turnosBotasRestantes -= 1 }
    if turnosBotasRestantes == 0 && nombreConBotas != "" {
        print("Botas de Sombras han expirado para \(nombreConBotas).")
        turnosBotasRestantes = -1
    }
}

